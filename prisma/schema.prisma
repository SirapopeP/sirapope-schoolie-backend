// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  seed     = "ts-node prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  ACADEMY_OWNER
  TEACHER
  STUDENT
}

enum Grade {
  A
  B
  C
  D
  F
}

model User {
  id                    String   @id @default(uuid())
  email                 String   @unique
  username              String   @unique
  name                  String?
  password              String
  passwordResetToken    String?
  passwordResetExpires  DateTime?
  roles                 UserRole[]
  academyOwner          Academy[]
  academyMember         AcademyMember[]
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  profile               UserProfile?
  posts                 Post[]
  workshopParticipants  WorkshopParticipant[]
}

model UserProfile {
  id            String   @id @default(uuid())
  bio           String?
  avatarUrl     String?
  phoneNumber   String?
  address       String?
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model UserRole {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, role])
}

model UserPermission {
  permissionId  String   @id @default(uuid())
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Academy {
  id            String    @id @default(uuid())
  name          String
  bio           String?
  logoUrl       String?
  workshopCount Int       @default(0)
  studentCount  Int       @default(0)
  teacherCount  Int       @default(0)
  academyRank   Float     @default(0)
  isActive      Boolean   @default(true)
  owner         User      @relation(fields: [ownerId], references: [id])
  ownerId       String
  members       AcademyMember[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([ownerId, name])
}

model AcademyMember {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  academy    Academy  @relation(fields: [academyId], references: [id])
  academyId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, academyId])
}

model Post {
  id        String   @id @default(uuid())
  title     String
  content   String?
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WorkshopCourses {
  id            String   @id @default(uuid())
  title         String
  description   String?
  maxSessions   Int
  level         String   // Beginner, Intermediate, Advanced
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  workshops     Workshop[]
}

model Workshop {
  id            String   @id @default(uuid())
  course        WorkshopCourses @relation(fields: [courseId], references: [id])
  courseId      String
  enrolledAt    DateTime @default(now())
  status        String   @default("IN_PROGRESS") // IN_PROGRESS, COMPLETED, CANCELLED
  sessions      WorkshopSession[]
  participants  WorkshopParticipant[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model WorkshopParticipant {
  id               String           @id @default(uuid())
  workshop         Workshop         @relation(fields: [workshopId], references: [id])
  workshopId       String
  user             User             @relation(fields: [userId], references: [id])
  userId           String
  role             String           // STUDENT, TEACHER
  teachingSessions WorkshopSession[] @relation("TeachingSessions")
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@unique([workshopId, userId])
}

model WorkshopSession {
  id            String   @id @default(uuid())
  workshop      Workshop @relation(fields: [workshopId], references: [id])
  workshopId    String
  sessionNumber Int
  date          DateTime
  grade         Grade?
  teacher       WorkshopParticipant? @relation("TeachingSessions", fields: [teacherId], references: [id])
  teacherId     String?
  submissionUrl String?
  status        String   @default("SCHEDULED") // SCHEDULED, COMPLETED, CANCELLED
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}